/**
 * T&Lサポート株式会社 相談対応表 自動化スクリプト【レイアウト改善版】
 * このスクリプトは、生成されるGoogleドキュメントの見た目をテーブルレイアウトで整形し、Google Chatに通知します。
 */

// ★★★【全体設定】★★★
// 設定は以前のままです。変更は不要です。
const FOLDER_ID = "15bqmqBsS2CyS5qTXIZ2yeUYuJHaQusa4";
const SHEET_NAME = "相談対応表_ver3";
const LINK_COLUMN_HEADER = "メモ";
const SORT_COLUMN_HEADER = "対応日";

// ★★★【Google Chat 連携設定】★★★
// Google ChatスペースのIncoming Webhook URLを貼り付けてください。
// 例: "https://chat.googleapis.com/v1/spaces/AAAA.../messages?key=AIza..."
// 設定しない（""のままにする）と、Chatへの通知は行われません。
const CHAT_WEBHOOK_URL = "https://chat.googleapis.com/v1/spaces/AAQAGG3CvEw/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=3clpmj2Zxva5srZOrl9Mej5cVAZgYD0qB2uidK8JywM"; // ← ここにWebhook URLを設定してください
// ★★★【設定はここまで】★★★


// --- 機能1：カスタムメニューと起動時の自動整形 ---
function onOpen() {
  // カスタムメニューを追加
  SpreadsheetApp.getUi()
    .createMenu('便利機能')
    .addItem('1行追加', 'insert1Row')
    .addItem('3行追加', 'insert3Rows')
    .addItem('5行追加', 'insert5Rows')
    .addToUi();

  // 【改善】起動時に「Geminiのアドバイス」列の折り返し設定を「切り詰める」にして、行が縦に広がるのを防ぐ
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME);
    if (!sheet) return;

    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const geminiColumnName = "Geminiのアドバイス";
    const geminiColumnIndex = headers.indexOf(geminiColumnName) + 1;

    if (geminiColumnIndex > 0) {
      // 列全体に適用
      const columnRange = sheet.getRange(1, geminiColumnIndex, sheet.getMaxRows(), 1);
      // 現在の設定を確認し、異なる場合のみ設定することで、無駄な書き込みを避ける
      if (columnRange.getWrapStrategy() !== SpreadsheetApp.WrapStrategy.CLIP) {
        columnRange.setWrapStrategy(SpreadsheetApp.WrapStrategy.CLIP);
      }
    }
  } catch (e) {
    // スプレッドシートが開けない、権限がないなどのエラーが発生しても、メニュー表示などは続行されるようにする
    console.error("起動時の自動整形処理でエラーが発生しました: " + e.toString());
  }
}

function insert1Row() { insertRowsBelowHeader(1); }
function insert3Rows() { insertRowsBelowHeader(3); }
function insert5Rows() { insertRowsBelowHeader(5); }
function insertRowsBelowHeader(numberOfRows) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME);
  if (!sheet) return;
  sheet.insertRowsAfter(1, numberOfRows);
  const newRowsRange = sheet.getRange(2, 1, numberOfRows, sheet.getLastColumn());
  newRowsRange.setHorizontalAlignment("left").setVerticalAlignment("middle");
}


// --- 機能2：フォーム送信時の自動処理 ---
/**
 * Googleフォームが送信されたときにトリガーで実行される関数です。
 * @param {Object} e - フォーム送信イベントに関する情報を持つオブジェクト。
 */
function onFormSubmit(e) {
  try {
    if (!e || !e.namedValues) {
      console.error("フォームの回答データが見つかりませんでした。");
      return; 
    }
    const values = e.namedValues;

    for (const key in values) {
      values[key] = values[key].join(', ');
    }

    const dateValue = values["対応日"] ? new Date(values["対応日"]) : new Date();
    const formattedDate = `${dateValue.getFullYear()}-${('0' + (dateValue.getMonth() + 1)).slice(-2)}-${('0' + dateValue.getDate()).slice(-2)}`;
    
    const companyName = values["事業者名"] || "名称未入力";
    const docTitle = `${formattedDate}_${companyName}_【相談記録】`;
    
    const newDoc = DocumentApp.create(docTitle);
    const body = newDoc.getBody();

    // --- ここからドキュメントの整形処理 ---

    // 1. スタイルの定義
    const headerStyle = {};
    headerStyle[DocumentApp.Attribute.BACKGROUND_COLOR] = '#F3F3F3'; // 薄いグレー
    headerStyle[DocumentApp.Attribute.BOLD] = true;

    // 2. メインタイトルの追加
    body.appendParagraph(`【相談記録】${companyName}様`).setHeading(DocumentApp.ParagraphHeading.TITLE);
    body.appendParagraph(`対応日: ${formattedDate}`).setHeading(DocumentApp.ParagraphHeading.SUBTITLE);
    body.appendHorizontalRule();

    // 3. テーブルに格納するデータと、長文用のデータを分ける
    const tableData = [];
    const longTextFields = [
      "事業者が考える課題 (顕在ニーズ)",
      "本質的な課題(潜在ニーズ)",
      "具体的な提案内容",
      "Geminiのアドバイス",
      "次アクション"
    ];
    const formItems = FormApp.openByUrl(SpreadsheetApp.getActiveSpreadsheet().getFormUrl()).getItems();
    
    formItems.forEach(item => {
      const title = item.getTitle();
      if (values[title] && longTextFields.indexOf(title) === -1) {
        tableData.push([title, values[title]]);
      }
    });

    // 4. テーブルを作成してスタイルを適用
    if (tableData.length > 0) {
      const table = body.appendTable(tableData);
      for (let i = 0; i < table.getNumRows(); i++) {
        table.getRow(i).getCell(0).setAttributes(headerStyle); // 1列目（項目名）にスタイル適用
      }
    }
    
    // 5. 長文項目を書き出す
    longTextFields.forEach(title => {
      if (values[title]) {
        body.appendParagraph("").setSpacingBefore(12); // 少しスペースを空ける
        body.appendParagraph(title).setHeading(DocumentApp.ParagraphHeading.HEADING2);
        body.appendParagraph(values[title]);
      }
    });

    // 6. フッターを追加
    body.appendParagraph("").setSpacingBefore(18);
    body.appendHorizontalRule();
    const footer = body.appendParagraph("T&Lサポート株式会社");
    footer.setAlignment(DocumentApp.HorizontalAlignment.RIGHT);
    
    // --- 整形処理はここまで ---
    
    newDoc.saveAndClose();

    const docFile = DriveApp.getFileById(newDoc.getId());
    const targetFolder = DriveApp.getFolderById(FOLDER_ID);
    docFile.moveTo(targetFolder);
    
    try {
      docFile.setSharing(DriveApp.Access.DOMAIN, DriveApp.Permission.EDIT);
    } catch (error) {
      console.log("ドメイン共有設定に失敗しました。エラー詳細: " + error.toString());
    }

    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME);
    if (!sheet) throw new Error(`シート「${SHEET_NAME}」が見つかりません。`);
    
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const linkColumnIndex = headers.indexOf(LINK_COLUMN_HEADER) + 1;
    
    if (linkColumnIndex > 0) {
      const row = e.range.getRow();
      sheet.getRange(row, linkColumnIndex).setValue(newDoc.getUrl());
    } else {
      console.log(`列「${LINK_COLUMN_HEADER}」が見つかりませんでした。`);
    }

    // 保留中のすべてのスプレッドシートの変更を適用します。これにより、moveRowsの安定性が向上します。
    SpreadsheetApp.flush(); 

    // フォームによって追加された行をヘッダーの直下（2行目）に移動します。
    // e.rangeを直接使うのではなく、行全体を明示的に取得し直してから移動します。
    const sourceRange = sheet.getRange(e.range.getRow(), 1, e.range.getNumRows(), sheet.getLastColumn());
    sheet.moveRows(sourceRange, 2);

    // ★★★【新規追加】Google Chatへの通知処理 ★★★
    if (CHAT_WEBHOOK_URL) {
      // フォームの回答データから主要な情報を抽出し、Chat用のカードを作成
      const chatPayload = createChatCard(values, formattedDate, newDoc.getUrl());
      // Chatに通知を送信
      sendNotificationToChat(chatPayload);
    }
    // ★★★【新規追加 ここまで】★★★

  } catch (error) {
    MailApp.sendEmail(Session.getEffectiveUser().getEmail(), 
                      "【GASエラー通知】相談記録の自動生成に失敗しました", 
                      "エラーが発生しました。\n\n" + error.toString() + "\n\nイベントオブジェクト: " + JSON.stringify(e));
  }
}

/**
 * Markdown形式のテキストをGoogle ChatでサポートされているシンプルなHTMLに変換します。
 * @param {string} text - 変換するMarkdownテキスト。
 * @return {string} 変換後のHTMLテキスト。
 */
function formatMarkdownForChat(text) {
  if (!text) return "";
  return text
    .replace(/\*\*(.*?)\*\*/g, '<b>$1</b>') // 太字 **text** -> <b>text</b>
    .replace(/\n/g, '<br/>');              // 改行 -> <br/>
}

// --- 機能3：毎日定時の自動並べ替え ---
function dailySortSheet() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME);
  if (!sheet) return;
  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  const sortColumnIndex = headers.indexOf(SORT_COLUMN_HEADER) + 1;
  if (sortColumnIndex === 0) return;
  const headerRows = 1;
  if (sheet.getLastRow() <= headerRows) return;
  const dataRange = sheet.getRange(headerRows + 1, 1, sheet.getLastRow() - headerRows, sheet.getLastColumn());
  dataRange.sort({ column: sortColumnIndex, ascending: false });
}


// ★★★【新規追加】Google Chat 通知関連の関数 ★★★
/**
 * Google Chatに送信するカード形式のメッセージを作成します。
 * @param {Object} formValues - フォームの回答データ (e.namedValues)。
 * @param {string} formattedDate - 整形済みの対応日。
 * @param {string} docUrl - 生成されたGoogleドキュメントのURL。
 * @return {Object} Google Chat API用のペイロードオブジェクト。
 */
function createChatCard(formValues, formattedDate, docUrl) {
  const companyName = formValues["事業者名"] || "名称未入力";
  const staffName = formValues["メイン担当者"] || "未入力";
  const consultationType = formValues["提案サービス"] || "未入力";
  const proposal = formatMarkdownForChat(formValues["具体的な提案内容"] || "記載がありません"); // Markdown対応
  const geminiAdvice = formValues["Geminiのアドバイス"] || "";

  // 企業名をT&Lサポートのブランドカラーに近い青色で強調
  const coloredCompanyName = `<font color="#00579B">${companyName}</font>`;
  
  // Geminiアドバイスから要約を抽出
  let adviceSummary = "";
  if (geminiAdvice) {
    const summaryMatch = geminiAdvice.match(/### 要約\n([\s\S]*?)(\n###|$)/);
    if (summaryMatch && summaryMatch[1]) {
      adviceSummary = formatMarkdownForChat(summaryMatch[1].trim());
    } else {
      // 要約がない場合は、全文の冒頭を切り出して表示
      adviceSummary = formatMarkdownForChat(geminiAdvice.substring(0, 200) + (geminiAdvice.length > 200 ? "..." : ""));
    }
  }

  const card = {
    "header": {
      "title": "📄 新着相談レポートが届きました！",
      "subtitle": `担当: ${staffName} さん`,
      // "imageUrl": "https://www.gstatic.com/images/icons/material/system/2x/post_add_black_48dp.png", // 表示に問題があるため、タイトル絵文字で代替
      "imageType": "CIRCLE"
    },
    "sections": [
      {
        "header": `<b>${coloredCompanyName}様</b>とのご相談`,
        "widgets": [
          { "decoratedText": { "topLabel": "対応日", "text": formattedDate, "startIcon": { "knownIcon": "CALENDAR" } } },
          { "decoratedText": { "topLabel": "相談種別", "text": consultationType, "startIcon": { "knownIcon": "STAR" } } }
        ]
      },
      {
        "header": "提案内容の概要",
        "collapsible": true,
        "widgets": [
          { "textParagraph": { "text": proposal } }
        ]
      }
    ]
  };

  // Geminiのアドバイスがあればセクションを追加
  if (adviceSummary) {
    card.sections.push({
      "header": "Geminiからの戦略的アドバイス (要約)",
      "collapsible": true,
      "widgets": [
        { "textParagraph": { "text": adviceSummary } }
      ]
    });
  }

  // 最後にボタンセクションを追加
  card.sections.push({
    "widgets": [{
      "buttonList": {
        "buttons": [{
          "text": "全ての記録をドキュメントで見る",
          "onClick": { "openLink": { "url": docUrl } },
          "icon": { "knownIcon": "DESCRIPTION" }
        }]
      }
    }]
  });

  return {
    "cardsV2": [{
      "cardId": "consultationCardWithGemini", // IDをより具体的に
      "card": card
    }]
  };
}

/**
 * Google Chatにメッセージを送信します。
 * @param {Object} payload - 送信するメッセージのペイロード。
 */
function sendNotificationToChat(payload) {
  if (!CHAT_WEBHOOK_URL) {
    console.log("Webhook URLが設定されていないため、Chatへの通知をスキップしました。");
    return;
  }
  const options = {
    'method': 'post',
    'contentType': 'application/json',
    'payload': JSON.stringify(payload)
  };
  try {
    UrlFetchApp.fetch(CHAT_WEBHOOK_URL, options);
  } catch (e) {
    console.error("Google Chatへの通知に失敗しました: " + e.toString());
    // 必要に応じて、Chat通知失敗を管理者にメールで通知するなどの処理を追加できます。
  }
}
// ★★★【新規追加 ここまで】★★★
