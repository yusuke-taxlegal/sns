/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LinePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_obsidian2 = require("obsidian");

// src/constants.ts
var isLocalMode = process.env.NODE_ENV === "local";
var BASE_URL = "https://line-to-obsidian.line-to-obsidian.workers.dev";
if (!BASE_URL) {
  console.error("\u8B66\u544A: OBSIDIAN_LINE_API_URL\u304C\u8A2D\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002API\u3068\u306E\u901A\u4FE1\u304C\u3067\u304D\u307E\u305B\u3093\u3002");
}
var API_ENDPOINTS = {
  BASE_URL,
  MESSAGES: (vaultId, userId) => {
    if (!vaultId || !userId) {
      throw new Error("vaultId\u3068userId\u306F\u5FC5\u9808\u30D1\u30E9\u30E1\u30FC\u30BF\u3067\u3059");
    }
    return `${BASE_URL}/messages/${vaultId}/${userId}`;
  },
  MAPPING: `${BASE_URL}/mapping`,
  UPDATE_SYNC_STATUS: `${BASE_URL}/messages/update-sync-status`
};

// src/main.ts
var DEFAULT_SETTINGS = {
  noteFolderPath: "LINE",
  vaultId: "",
  lineUserId: "",
  autoSync: false,
  syncInterval: 2,
  syncOnStartup: false,
  organizeByDate: false,
  fileNameTemplate: "{date}-{messageId}"
};
var LinePlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.syncIntervalId = null;
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new LineSettingTab(this.app, this));
    this.addCommand({
      id: "sync-line-messages",
      name: "Sync LINE messages",
      callback: async () => {
        await this.syncMessages();
      }
    });
    this.addRibbonIcon("refresh-cw", "Sync LINE messages", async () => {
      await this.syncMessages();
    });
    this.setupAutoSync();
    if (this.settings.syncOnStartup) {
      setTimeout(() => {
        this.syncMessages(true);
      }, 3e3);
    }
  }
  onunload() {
    this.clearAutoSync();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.setupAutoSync();
  }
  toJST(timestamp) {
    return new Date(timestamp);
  }
  getJSTDateString(timestamp) {
    const jstDate = this.toJST(timestamp);
    return jstDate.toISOString().split("T")[0].replace(/-/g, "");
  }
  getJSTDateWithHyphens(timestamp) {
    const jstDate = this.toJST(timestamp);
    return jstDate.toISOString().split("T")[0];
  }
  getJSTISOString(timestamp) {
    const jstDate = this.toJST(timestamp);
    return jstDate.toISOString();
  }
  getJSTTimeForFileName(timestamp) {
    const jstDate = this.toJST(timestamp);
    const year = jstDate.getFullYear();
    const month = String(jstDate.getMonth() + 1).padStart(2, "0");
    const day = String(jstDate.getDate()).padStart(2, "0");
    const hour = String(jstDate.getHours()).padStart(2, "0");
    const minute = String(jstDate.getMinutes()).padStart(2, "0");
    const second = String(jstDate.getSeconds()).padStart(2, "0");
    return `${year}${month}${day}${hour}${minute}${second}`;
  }
  getTimeOnly(timestamp) {
    const jstDate = this.toJST(timestamp);
    const hour = String(jstDate.getHours()).padStart(2, "0");
    const minute = String(jstDate.getMinutes()).padStart(2, "0");
    const second = String(jstDate.getSeconds()).padStart(2, "0");
    return `${hour}${minute}${second}`;
  }
  generateFileName(message) {
    const template = this.settings.fileNameTemplate;
    const timestamp = message.timestamp;
    const variables = {
      "{date}": this.getJSTDateWithHyphens(timestamp),
      "{datecompact}": this.getJSTDateString(timestamp),
      "{time}": this.getTimeOnly(timestamp),
      "{datetime}": this.getJSTTimeForFileName(timestamp),
      "{messageId}": message.messageId,
      "{userId}": message.userId,
      "{timestamp}": timestamp.toString()
    };
    let fileName = template;
    for (const [variable, value] of Object.entries(variables)) {
      fileName = fileName.replace(new RegExp(variable.replace(/[{}]/g, "\\$&"), "g"), value);
    }
    if (!fileName.endsWith(".md")) {
      fileName += ".md";
    }
    return fileName;
  }
  async generateUniqueFileName(message, folderPath) {
    const baseFileName = this.generateFileName(message);
    const baseName = baseFileName.replace(/\.md$/, "");
    const extension = ".md";
    let uniqueFileName = baseFileName;
    let counter = 1;
    while (true) {
      const fullPath = (0, import_obsidian.normalizePath)(`${folderPath}/${uniqueFileName}`);
      const exists = await this.app.vault.adapter.exists(fullPath);
      if (!exists) {
        return uniqueFileName;
      }
      uniqueFileName = `${baseName}_${counter}${extension}`;
      counter++;
    }
  }
  setupAutoSync() {
    this.clearAutoSync();
    if (this.settings.autoSync) {
      const interval = Math.max(1, Math.min(5, this.settings.syncInterval));
      const intervalMs = interval * 60 * 60 * 1e3;
      this.syncIntervalId = window.setInterval(() => {
        this.syncMessages(true);
      }, intervalMs);
      console.log(`\u81EA\u52D5\u540C\u671F\u304C\u6709\u52B9\u5316\u3055\u308C\u307E\u3057\u305F\u3002\u9593\u9694: ${interval}\u6642\u9593`);
    }
  }
  clearAutoSync() {
    if (this.syncIntervalId !== null) {
      window.clearInterval(this.syncIntervalId);
      this.syncIntervalId = null;
      console.log("\u81EA\u52D5\u540C\u671F\u304C\u7121\u52B9\u5316\u3055\u308C\u307E\u3057\u305F");
    }
  }
  async syncMessages(isAutoSync = false) {
    if (!this.settings.vaultId) {
      new import_obsidian.Notice("Vault ID not configured. Please set it in plugin settings.");
      return;
    }
    try {
      if (!isAutoSync) {
        new import_obsidian.Notice("Syncing LINE messages...");
      }
      const url = API_ENDPOINTS.MESSAGES(this.settings.vaultId, this.settings.lineUserId);
      const response = await (0, import_obsidian2.requestUrl)({
        url,
        method: "GET"
      });
      if (response.status !== 200) {
        throw new Error(`Failed to fetch messages: ${response.status}`);
      }
      const responseText = response.text;
      let messages;
      try {
        messages = JSON.parse(responseText);
      } catch (parseError) {
        throw new Error("Invalid response format");
      }
      let newMessageCount = 0;
      const syncedMessageIds = [];
      for (const message of messages) {
        if (message.synced) {
          continue;
        }
        let folderPath;
        if (this.settings.organizeByDate) {
          const dateString = this.getJSTDateString(message.timestamp);
          folderPath = `${this.settings.noteFolderPath}/${dateString}`;
        } else {
          folderPath = this.settings.noteFolderPath;
        }
        try {
          const fileName = await this.generateUniqueFileName(message, folderPath);
          const filePath = `${folderPath}/${fileName}`;
          const normalizedFilePath = (0, import_obsidian.normalizePath)(filePath);
          const normalizedFolderPath = (0, import_obsidian.normalizePath)(this.settings.noteFolderPath);
          if (!await this.app.vault.adapter.exists(normalizedFolderPath)) {
            await this.app.vault.createFolder(normalizedFolderPath);
          }
          const normalizedTargetFolderPath = (0, import_obsidian.normalizePath)(folderPath);
          if (!await this.app.vault.adapter.exists(normalizedTargetFolderPath)) {
            await this.app.vault.createFolder(normalizedTargetFolderPath);
          }
          const content = [
            `---`,
            `source: LINE`,
            `date: ${this.getJSTISOString(message.timestamp)}`,
            `messageId: ${message.messageId}`,
            `userId: ${message.userId}`,
            `---`,
            ``,
            `${message.text}`
          ].join("\n");
          await this.app.vault.create(normalizedFilePath, content);
          newMessageCount++;
          syncedMessageIds.push(message.messageId);
        } catch (err) {
          console.error(`Error processing message ${message.messageId}: ${err}`);
        }
      }
      if (syncedMessageIds.length > 0) {
        await this.updateSyncStatus(syncedMessageIds);
      }
      if (newMessageCount > 0 || !isAutoSync) {
        new import_obsidian.Notice(`LINE messages synced successfully. ${newMessageCount} new messages.`);
      }
    } catch (err) {
      new import_obsidian.Notice(`Failed to sync LINE messages: ${err instanceof Error ? err.message : "Unknown error"}`);
    }
  }
  async updateSyncStatus(messageIds) {
    try {
      if (!this.settings.lineUserId) {
        console.error("LINE User ID not configured. Cannot update sync status.");
        return;
      }
      const response = await (0, import_obsidian2.requestUrl)({
        url: API_ENDPOINTS.UPDATE_SYNC_STATUS,
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          vaultId: this.settings.vaultId,
          messageIds,
          userId: this.settings.lineUserId
        })
      });
      if (response.status !== 200) {
        console.error(`Failed to update sync status: ${response.status}`);
      }
    } catch (err) {
      console.error(`Error updating sync status: ${err instanceof Error ? err.message : "Unknown error"}`);
    }
  }
  async registerMapping() {
    if (!this.settings.lineUserId || !this.settings.vaultId) {
      new import_obsidian.Notice("LINE UserID\u3068Vault ID\u306E\u4E21\u65B9\u3092\u8A2D\u5B9A\u3057\u3066\u304F\u3060\u3055\u3044\u3002");
      return;
    }
    try {
      const response = await (0, import_obsidian2.requestUrl)({
        url: API_ENDPOINTS.MAPPING,
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          userId: this.settings.lineUserId,
          vaultId: this.settings.vaultId
        })
      });
      if (response.status !== 200) {
        throw new Error("\u30DE\u30C3\u30D4\u30F3\u30B0\u306E\u767B\u9332\u306B\u5931\u6557\u3057\u307E\u3057\u305F");
      }
      new import_obsidian.Notice("LINE UserID\u3068Vault ID\u306E\u30DE\u30C3\u30D4\u30F3\u30B0\u3092\u767B\u9332\u3057\u307E\u3057\u305F\u3002");
    } catch (error) {
      new import_obsidian.Notice(`\u30DE\u30C3\u30D4\u30F3\u30B0\u306E\u767B\u9332\u306B\u5931\u6557\u3057\u307E\u3057\u305F: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
};
var LineSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "LINE Integration Settings" });
    new import_obsidian.Setting(containerEl).setName("Note folder path").setDesc("LINE\u30E1\u30C3\u30BB\u30FC\u30B8\u304C\u4FDD\u5B58\u3055\u308C\u308B\u30D5\u30A9\u30EB\u30C0\u30D1\u30B9").addText((text) => text.setPlaceholder("LINE").setValue(this.plugin.settings.noteFolderPath).onChange(async (value) => {
      this.plugin.settings.noteFolderPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Vault ID").setDesc("\u3053\u306EObsidian Vault\u7528\u306E\u4E00\u610F\u306E\u8B58\u5225\u5B50\uFF08\u4EFB\u610F\u306E\u30E6\u30CB\u30FC\u30AF\u306AID\u3092\u4F5C\u6210\u3057\u3066\u304F\u3060\u3055\u3044\uFF09").addText((text) => text.setPlaceholder("Enter vault ID").setValue(this.plugin.settings.vaultId).onChange(async (value) => {
      this.plugin.settings.vaultId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("LINE user ID").setDesc("LINE\u30DC\u30C3\u30C8\u3068\u306E\u4F1A\u8A71\u3067\u53D6\u5F97\u3057\u305F\u30E6\u30FC\u30B6\u30FCID\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044").addText((text) => text.setPlaceholder("Enter your LINE User ID").setValue(this.plugin.settings.lineUserId).onChange(async (value) => {
      this.plugin.settings.lineUserId = value;
      await this.plugin.saveSettings();
    }));
    const autoSyncSetting = new import_obsidian.Setting(containerEl).setName("Auto sync").setDesc("LINE\u30E1\u30C3\u30BB\u30FC\u30B8\u3092\u81EA\u52D5\u7684\u306B\u540C\u671F\u3059\u308B\u304B\u3069\u3046\u304B").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoSync).onChange(async (value) => {
      this.plugin.settings.autoSync = value;
      await this.plugin.saveSettings();
      syncIntervalSetting.settingEl.toggle(value);
    }));
    const syncIntervalSetting = new import_obsidian.Setting(containerEl).setName("Sync interval").setDesc("LINE\u30E1\u30C3\u30BB\u30FC\u30B8\u3092\u540C\u671F\u3059\u308B\u9593\u9694\uFF08\u6642\u9593\u5358\u4F4D\uFF09").addDropdown((dropdown) => {
      const hours = [1, 2, 3, 4, 5];
      hours.forEach((hour) => {
        dropdown.addOption(hour.toString(), `${hour}\u6642\u9593`);
      });
      dropdown.setValue(this.plugin.settings.syncInterval.toString());
      dropdown.onChange(async (value) => {
        const interval = parseInt(value);
        if (!isNaN(interval) && interval >= 1 && interval <= 5) {
          this.plugin.settings.syncInterval = interval;
          await this.plugin.saveSettings();
        }
      });
    });
    syncIntervalSetting.settingEl.toggle(this.plugin.settings.autoSync);
    new import_obsidian.Setting(containerEl).setName("Sync on startup").setDesc("Obsidian\u8D77\u52D5\u6642\u306BLINE\u30E1\u30C3\u30BB\u30FC\u30B8\u3092\u540C\u671F\u3059\u308B\u304B\u3069\u3046\u304B").addToggle((toggle) => toggle.setValue(this.plugin.settings.syncOnStartup).onChange(async (value) => {
      this.plugin.settings.syncOnStartup = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Organize by date").setDesc("\u65E5\u4ED8\u3054\u3068\u306B\u30D5\u30A9\u30EB\u30C0\u3092\u4F5C\u6210\u3057\u3066\u30E1\u30C3\u30BB\u30FC\u30B8\u3092\u6574\u7406\u3059\u308B\u304B\u3069\u3046\u304B").addToggle((toggle) => toggle.setValue(this.plugin.settings.organizeByDate).onChange(async (value) => {
      this.plugin.settings.organizeByDate = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("File name template").setDesc("\u30D5\u30A1\u30A4\u30EB\u540D\u306E\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\uFF08.md\u62E1\u5F35\u5B50\u306F\u81EA\u52D5\u3067\u4ED8\u4E0E\u3055\u308C\u307E\u3059\uFF09\u3002\u5229\u7528\u53EF\u80FD\u306A\u5909\u6570: {date}, {datecompact}, {time}, {datetime}, {messageId}, {userId}, {timestamp}").addText((text) => text.setPlaceholder("{date}-{messageId}").setValue(this.plugin.settings.fileNameTemplate).onChange(async (value) => {
      this.plugin.settings.fileNameTemplate = value || "{date}-{messageId}";
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("div", {
      text: "\u5909\u6570\u306E\u8AAC\u660E:",
      cls: "setting-item-description"
    });
    containerEl.createEl("ul", {}, (ul) => {
      ul.createEl("li", { text: "{date}: \u65E5\u4ED8 (\u4F8B: 2024-01-15)" });
      ul.createEl("li", { text: "{datecompact}: \u65E5\u4ED8\uFF08\u30CF\u30A4\u30D5\u30F3\u306A\u3057\uFF09 (\u4F8B: 20240115)" });
      ul.createEl("li", { text: "{time}: \u6642\u523B (\u4F8B: 103045)" });
      ul.createEl("li", { text: "{datetime}: \u65E5\u6642 (\u4F8B: 20240115103045)" });
      ul.createEl("li", { text: "{messageId}: \u30E1\u30C3\u30BB\u30FC\u30B8ID" });
      ul.createEl("li", { text: "{userId}: \u30E6\u30FC\u30B6\u30FCID" });
      ul.createEl("li", { text: "{timestamp}: Unix\u30BF\u30A4\u30E0\u30B9\u30BF\u30F3\u30D7" });
    });
    new import_obsidian.Setting(containerEl).setName("Register mapping").setDesc("LINE UserID\u3068Vault ID\u306E\u30DE\u30C3\u30D4\u30F3\u30B0\u3092\u767B\u9332\u3057\u307E\u3059").addButton((button) => button.setButtonText("Register").onClick(async () => {
      await this.plugin.registerMapping();
    }));
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});

/* nosourcemap */