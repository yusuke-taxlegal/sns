// シートの名前を定数として定義
const SPREADSHEET = SpreadsheetApp.getActiveSpreadsheet();
const LIST_SHEET_NAME = '👤 参加者リスト';
const SETTINGS_SHEET_NAME = '⚙️ 設定・メール文面';
const LOG_SHEET_NAME = '📝 送信ログ';

// 列の番号を定数として定義（A列が1, B列が2...）
const CHECKBOX_COL = 1;      // 送信チェック
const NAME_COL = 2;          // 氏名
const EMAIL_COL = 3;         // メールアドレス
const GUIDE_STATUS_COL = 4;  // 案内メール状況
const THANKS_STATUS_COL = 5; // お礼メール状況

/**
 * シートを開いたときにカスタムメニューを追加する関数
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('セミナー用メール送信')
    .addItem('選択した人に案内メールを送信', 'sendGuideMail')
    .addSeparator()
    .addItem('選択した人にお礼メールを送信', 'sendThanksMail')
    .addToUi();
}

/**
 * 案内メールを送信するメインの関数
 */
function sendGuideMail() {
  sendMail('guide');
}

/**
 * お礼メールを送信するメインの関数
 */
function sendThanksMail() {
  sendMail('thanks');
}

/**
 * メール送信を実行する共通関数
 * @param {string} mailType - 'guide' (案内) または 'thanks' (お礼)
 */
function sendMail(mailType) {
  // 設定シートから情報を取得
  const settings = getSettings();
  if (!settings) return; // 設定がなければ終了

  // リストシートからチェックされた行を取得
  const listSheet = SPREADSHEET.getSheetByName(LIST_SHEET_NAME);
  const dataRange = listSheet.getDataRange();
  const values = dataRange.getValues();
  const rowsToSend = [];

  // ヘッダー行（1行目）を除いてループ
  for (let i = 1; i < values.length; i++) {
    // チェックボックスがtrueの行を対象
    if (values[i][CHECKBOX_COL - 1] === true) {
      rowsToSend.push({
        rowNum: i + 1, // シート上の実際の行番号
        name: values[i][NAME_COL - 1],
        email: values[i][EMAIL_COL - 1]
      });
    }
  }

  // 送信する人がいなければ終了
  if (rowsToSend.length === 0) {
    SpreadsheetApp.getUi().alert('送信対象が選択されていません。');
    return;
  }

  // 送信の最終確認
  const ui = SpreadsheetApp.getUi();
  const response = ui.alert(
    '確認',
    `${rowsToSend.length}件の${mailType === 'guide' ? '案内' : 'お礼'}メールを送信します。よろしいですか？`,
    ui.ButtonSet.YES_NO
  );

  if (response !== ui.Button.YES) {
    return; // NOが押されたら終了
  }

  // メールの件名と本文を決定
  const subject = mailType === 'guide' ? settings.guideSubject : settings.thanksSubject;
  const bodyTemplate = mailType === 'guide' ? settings.guideBody : settings.thanksBody;
  const statusCol = mailType === 'guide' ? GUIDE_STATUS_COL : THANKS_STATUS_COL;

  // 1行ずつメールを送信
  rowsToSend.forEach(person => {
    try {
      // 本文の{{氏名}}を置換
      const body = bodyTemplate.replace('{{氏名}}', person.name);
      
      // メール送信
      GmailApp.sendEmail(person.email, subject, body);

      // 送信ステータスを更新
      const timestamp = new Date();
      listSheet.getRange(person.rowNum, statusCol).setValue(`送信済み (${Utilities.formatDate(timestamp, "JST", "yyyy/MM/dd HH:mm")})`);
      
      // ログシートに記録
      logSending('成功', mailType, person.email, timestamp);
      
      // チェックボックスをfalseに戻す
      listSheet.getRange(person.rowNum, CHECKBOX_COL).setValue(false);

    } catch (e) {
      // エラーログを記録
      logSending('失敗', mailType, person.email, new Date(), e.message);
    }
  });
  
  ui.alert('送信が完了しました。');
}

/**
 * 設定シートからメール設定を取得するヘルパー関数
 * @returns {object|null} 設定情報のオブジェクト
 */
function getSettings() {
  try {
    const settingsSheet = SPREADSHEET.getSheetByName(SETTINGS_SHEET_NAME);
    const settings = {
      seminarName: settingsSheet.getRange('B1').getValue(),
      dateTime: settingsSheet.getRange('B2').getValue(),
      zoomUrl: settingsSheet.getRange('B3').getValue(),
      guideSubject: settingsSheet.getRange('B4').getValue(),
      guideBody: settingsSheet.getRange('B5').getValue(),
      thanksSubject: settingsSheet.getRange('B6').getValue(),
      thanksBody: settingsSheet.getRange('B7').getValue()
    };
    return settings;
  } catch (e) {
    SpreadsheetApp.getUi().alert('「⚙️ 設定・メール文面」シートが見つからないか、形式が正しくありません。');
    return null;
  }
}

/**
 * 送信ログを記録するヘルパー関数
 * @param {string} result - '成功' または '失敗'
 * @param {string} mailType - 'guide' または 'thanks'
 * @param {string} email - 送信先メールアドレス
 * @param {Date} timestamp - タイムスタンプ
 * @param {string} [error=''] - エラーメッセージ
 */
function logSending(result, mailType, email, timestamp, error = '') {
  const logSheet = SPREADSHEET.getSheetByName(LOG_SHEET_NAME);
  logSheet.appendRow([
    timestamp,
    mailType === 'guide' ? '案内メール' : 'お礼メール',
    email,
    result,
    error
  ]);
}